# yaml-language-server: $schema=https://raw.githubusercontent.com/swarmlibs/dockerstack-schema/main/schema/dockerstack-spec.json

x-deploy: &x-deploy
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - node.role == manager

x-grafana-helpers-deploy: &x-grafana-helpers-deploy
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - node.labels.services.promstack_grafana == true

x-grafana-helpers-resources-constraints: &x-grafana-helpers-resources-constraints
  limits:
    memory: 64M

x-default-logging: &x-default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

services:

  # ====================================================
  # Grafana Dashboard
  # https://github.com/grafana/grafana
  # ====================================================

  grafana-server:
    image: ${PROMSTACK_GRAFANA_VERSION}
    entrypoint: ["/docker-entrypoint-shim.sh"]
    environment:
      GF_SECURITY_ADMIN_USER: $${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: $${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: $${GF_USERS_ALLOW_SIGN_UP}
      # docker-entrypoint-shim.sh
      GRAFANA_UNIFIED_ALERTING_INTERFACE: eth2
    networks:
      prometheus: # eth1
      grafana: # eth2
        aliases:
          - grafana.local
      public: # eth3
        aliases:
          - grafana.svc.cluster.local
      prometheus_gwnetwork:
    hostname: replica-{{.Task.Slot}}.grafana.local
    configs:
      - source: gf-server-entrypoint
        target: /docker-entrypoint-shim.sh
        mode: 0555
    volumes:
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
      - type: volume
        source: grafana-logs
        target: /var/log/grafana
      - type: volume
        source: grafana-dashboards
        target: /etc/grafana/dashboards
      - type: volume
        source: grafana-provisioning-dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: volume
        source: grafana-provisioning-datasources
        target: /etc/grafana/provisioning/datasources
    logging: *x-default-logging
    deploy:
      <<: *x-deploy
      labels:
        io.prometheus.enabled: "true"
        io.prometheus.job_name: "grafana"
        io.prometheus.scrape_port: "3000"
      restart_policy:
        condition: any
        max_attempts: 15
        delay: 30s
        window: 15s
      rollback_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1

  # ====================================================
  # Grafana provisioning config provider & reloader
  # Only 1 replica is needed for each
  # ====================================================
  
  grafana-provisioning-config-reloader:
    image: ${PROMSTACK_GRAFANA_CONFIG_RELOADER_VERSION}
    environment:
      GF_SERVER_DOMAIN: replica-{{.Task.Slot}}.grafana.local
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_SECURITY_ADMIN_USER: $${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: $${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      grafana:
    volumes:
      - type: volume
        source: grafana-provisioning-config-reloader
        target: /data
      - type: volume
        source: grafana-provisioning-dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: volume
        source: grafana-provisioning-datasources
        target: /etc/grafana/provisioning/datasources
        read_only: true
    logging: *x-default-logging
    deploy:
      <<: *x-grafana-helpers-deploy
      resources: *x-grafana-helpers-resources-constraints
      restart_policy:
        condition: any
        max_attempts: 15
        delay: 15s
        window: 10s
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1
    depends_on:
      - grafana
      - grafana-dashboard-provider
      - grafana-provisioning-dashboard-provider
      - grafana-provisioning-datasource-provider

  # Grafana dashboards provider
  grafana-dashboard-provider:
    image: ${PROMSTACK_GRAFANA_CONFIG_PROVIDER_VERSION}
    command:
      - --output-ext=json
      - --output-dir=/grafana-dashboards.d
      - --prometheus-scrape-config-label=io.grafana.dashboard
    configs:
      - source: gf-dashboard-grafana-metrics
      - source: gf-dashboard-prometheus-stats
      - source: gf-dashboard-prometheus-stats-v2
      - source: gf-dashboard-dockerswarm-nodes-dashboard
      - source: gf-dashboard-dockerswarm-services-endpoints
      - source: gf-dashboard-dockerswarm-services
      - source: gf-dashboard-cadvisor
      - source: gf-dashboard-node-exporter
    volumes:
      - type: volume
        source: grafana-dashboards
        target: /grafana-dashboards.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    logging: *x-default-logging
    deploy:
      <<: *x-grafana-helpers-deploy
      resources: *x-grafana-helpers-resources-constraints
      restart_policy:
        condition: any
        max_attempts: 15
        delay: 15s
        window: 10s
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1

  # Grafana provisioning config for datasources and dashboards
  grafana-provisioning-dashboard-provider:
    image: ${PROMSTACK_GRAFANA_CONFIG_PROVIDER_VERSION}
    command:
      - --output-dir=/grafana-provisioning-dashboards.d
      - --prometheus-scrape-config-label=io.grafana.provisioning.dashboard
    configs:
      - source: gf-provisioning-dashboards
    volumes:
      - type: volume
        source: grafana-provisioning-dashboards
        target: /grafana-provisioning-dashboards.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    logging: *x-default-logging
    deploy:
      <<: *x-grafana-helpers-deploy
      resources: *x-grafana-helpers-resources-constraints
      restart_policy:
        condition: any
        max_attempts: 15
        delay: 15s
        window: 10s
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1

  grafana-provisioning-datasource-provider:
    image: ${PROMSTACK_GRAFANA_CONFIG_PROVIDER_VERSION}
    command:
      - --output-dir=/grafana-provisioning-datasources.d
      - --prometheus-scrape-config-label=io.grafana.provisioning.datasource
    configs:
      - source: gf-provisioning-datasource-prometheus
    volumes:
      - type: volume
        source: grafana-provisioning-datasources
        target: /grafana-provisioning-datasources.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    logging: *x-default-logging
    deploy:
      <<: *x-grafana-helpers-deploy
      resources: *x-grafana-helpers-resources-constraints
      restart_policy:
        condition: any
        max_attempts: 15
        delay: 15s
        window: 10s
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.1

volumes:
  grafana-data:
  grafana-logs:
  grafana-dashboards:
  grafana-provisioning-dashboards:
  grafana-provisioning-datasources:
  grafana-provisioning-config-reloader:

networks:
  public:
    name: public
    external: true
  grafana:
    # Internal network for Grafana services
  prometheus:
    name: prometheus
    external: true
  prometheus_gwnetwork:
    name: prometheus_gwnetwork
    external: true

configs:
  # Grafana entrypoint script
  gf-server-entrypoint:
    name: gf-server-entrypoint-v1
    file: ./grafana/docker-entrypoint-shim.sh

  # Grafana dashboards provisioning config
  gf-provisioning-dashboards:
    name: gf-provisioning-dashboards-v1
    file: ./grafana/provisioning/dashboards/grafana-dashboards.yml
    labels: [ "io.grafana.provisioning.dashboard=true" ]
  # Grafana datasources provisioning config
  gf-provisioning-datasource-prometheus:
    name: gf-provisioning-datasource-prometheus-v1
    file: ./grafana/provisioning/datasources/prometheus.yaml
    labels:
      - "io.grafana.provisioning.datasource=true"

  # Grafana & Prometheus dashboards
  gf-dashboard-grafana-metrics:
    name: gf-dashboard-grafana-metrics-v1
    file: ./grafana/dashboards/grafana-metrics.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-prometheus-stats:
    name: gf-dashboard-prometheus-stats-v1
    file: ./grafana/dashboards/prometheus-stats.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-prometheus-stats-v2:
    name: gf-dashboard-prometheus-stats-v2
    file: ./grafana/dashboards/prometheus-2-0-stats.json
    labels: [ "io.grafana.dashboard=true" ]

  # Docker Swarm specific dashboards
  gf-dashboard-dockerswarm-nodes-dashboard:
    name: gf-dashboard-dockerswarm-nodes-dashboard-v1
    file: ./grafana/dashboards/dockerswarm-nodes.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-dockerswarm-services-endpoints:
    name: gf-dashboard-dockerswarm-services-endpoints-v1
    file: ./grafana/dashboards/dockerswarm-services-endpoints.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-dockerswarm-services:
    name: gf-dashboard-dockerswarm-services-v1
    file: ./grafana/dashboards/dockerswarm-services.json
    labels: [ "io.grafana.dashboard=true" ]

  # cAdvisor
  gf-dashboard-cadvisor:
    name: gf-dashboard-cadvisor-v1
    file: ./grafana/dashboards/cadvisor.json
    labels: [ "io.grafana.dashboard=true" ]
  # Node Exporter
  gf-dashboard-node-exporter:
    name: gf-dashboard-node-exporter-v1
    file: ./grafana/dashboards/node-exporter.json
    labels: [ "io.grafana.dashboard=true" ]
